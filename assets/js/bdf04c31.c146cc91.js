"use strict";(self.webpackChunksimbot_website=self.webpackChunksimbot_website||[]).push([[8389],{5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var a=t(7462),r=t(7294),l=t(6010),o=t(2389),i=t(7392),s=t(7094),u=t(2466);const c="tabList__CuJ",d="tabItem_LNqP";function g(e){var n,t;const{lazy:o,block:g,defaultValue:p,values:m,groupId:v,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),h=(0,i.l)(k,((e,n)=>e.value===n.value));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===p?p:null!=(n=null!=p?p:null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)?n:f[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:M,setTabGroupChoices:w}=(0,s.U)(),[C,x]=(0,r.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=v){const e=M[v];null!=e&&e!==C&&k.some((n=>n.value===e))&&x(e)}const N=e=>{const n=e.currentTarget,t=T.indexOf(n),a=k[t].value;a!==C&&(E(n),x(a),null!=v&&w(v,String(a)))},I=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var a;const n=T.indexOf(e.currentTarget)+1;t=null!=(a=T[n])?a:T[0];break}case"ArrowLeft":{var r;const n=T.indexOf(e.currentTarget)-1;t=null!=(r=T[n])?r:T[T.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":g},b)},k.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:e=>T.push(e),onKeyDown:I,onFocus:N,onClick:N},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),o?(0,r.cloneElement)(f.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==C})))))}function p(e){const n=(0,o.Z)();return r.createElement(g,(0,a.Z)({key:String(n)},e))}},8231:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),l=(t(1839),t(5488)),o=t(5162);const i={sidebar_position:20,title:"core\u6982\u89c8"},s=void 0,u={unversionedId:"take-a-look/code-overview",id:"take-a-look/code-overview",title:"core\u6982\u89c8",description:"\u6838\u5fc3\u6a21\u5757\u4e0b\u6240\u652f\u6301\u7684\u66f4\u8d34\u8fd1\u539f\u751f\u7684\u4f7f\u7528\u65b9\u5f0f\u3002",source:"@site/docs/take-a-look/code-overview.md",sourceDirName:"take-a-look",slug:"/take-a-look/code-overview",permalink:"/docs/take-a-look/code-overview",draft:!1,editUrl:"https://github.com/simple-robot-library/simbot3-website/blob/main/docs/docs/take-a-look/code-overview.md",tags:[],version:"current",lastUpdatedBy:"ForteScarlet",lastUpdatedAt:1667277196,formattedLastUpdatedAt:"Nov 1, 2022",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"core\u6982\u89c8"},sidebar:"docs",previous:{title:"\u76d1\u542c\u6982\u89c8",permalink:"/docs/take-a-look/listen-overview"},next:{title:"boot\u6982\u89c8",permalink:"/docs/take-a-look/boot-overview"}},c={},d=[],g={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u6838\u5fc3\u6a21\u5757\u4e0b\u6240\u652f\u6301\u7684\u66f4\u8d34\u8fd1\u539f\u751f\u7684\u4f7f\u7528\u65b9\u5f0f\u3002"),(0,r.kt)("admonition",{title:"\u6ce8\u610f",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u4e0b\u6587\u4e2d\u6709\u5173\u4e8e\u76d1\u542c\u51fd\u6570\u6ce8\u518c\u7684\u5185\u5bb9\u5e76\u975e\u76ee\u524d\u7684\u6700\u63a8\u8350\u65b9\u5f0f\u3002")),(0,r.kt)(l.Z,{groupId:"code",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"Kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// listener manager\nval listenerManager = coreListenerManager { /* config... */  }\n\n// bot manager\nval botManager = xxxBotManager(listenerManager) { /* config... */ }\n\n// register bot\nval bot = botManager.register(id, key, token, orAnyOther) { /* config... */ }\n\n// listen event.\nlistenerManager.listen(ChannelMessageEvent) { context, event ->\n    println(context)\n    \n    event.replyIfSupport(Text { "Hello World" } + At(event.author.id))\n    \n    val guild = event.channel().guild()\n    \n    guild.children().forEach { ch -> println("Channel ${ch.name} in guild ${guild.name}") } \n    \n    // result value.\n    null\n}\n\nbot.start()\nbot.join()\n\n'))),(0,r.kt)(o.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// listener manager\nfinal CoreListenerManagerConfiguration listenerManagerConfiguration = new CoreListenerManagerConfiguration();\nfinal CoreListenerManager listenerManager = CoreListenerManager.newInstance(listenerManagerConfiguration);\n\nfinal BotManager<?> botManager = xxxBotManager(listenerManager, (config) -> { /* ... */ });\n\nfinal Bot register = botManager.register(id, key, token, orAnyOther, (config) -> { /* ... */ });\n\n\nfinal EventListener listener = CoreListenerUtil.newCoreListener(\n        ChannelMessageEvent.Key,\n        (context, event) -> {\n            System.out.println(context);\n\n            if (event instanceof MessageReplySupport) {\n                final Messages messages = Messages.getMessages(\n                        Text.getText("Hello World"),\n                        new At(event.getAuthor().getId())\n                );\n\n                ((MessageReplySupport) event).replyBlocking(messages);\n            }\n\n            final Guild guild = event.getChannel().getGuild();\n\n            guild.getChildren(null, Limiter.ZERO)\n                    .forEach(ch -> System.out.println("Channel " + ch.getName() + "in guild " + guild.getName()));\n\n\n            return null;\n        }\n);\n\n// register listener\nlistenerManager.register(listener);\n\n\nregister.startBlocking();\nregister.joinBlocking();\n')))))}p.isMDXComponent=!0}}]);