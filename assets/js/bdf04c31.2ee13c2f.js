"use strict";(self.webpackChunksimbot_website=self.webpackChunksimbot_website||[]).push([[8389],{8231:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>g});var a=n(7462),r=(n(7294),n(3905)),o=(n(8209),n(5488)),i=n(5162);const s={sidebar_position:20,title:"core\u6982\u89c8"},l=void 0,d={unversionedId:"take-a-look/code-overview",id:"take-a-look/code-overview",title:"core\u6982\u89c8",description:"\u6838\u5fc3\u6a21\u5757\u4e0b\u6240\u652f\u6301\u7684\u66f4\u8d34\u8fd1\u539f\u751f\u7684\u4f7f\u7528\u65b9\u5f0f\u3002",source:"@site/docs/take-a-look/code-overview.md",sourceDirName:"take-a-look",slug:"/take-a-look/code-overview",permalink:"/docs/take-a-look/code-overview",draft:!1,editUrl:"https://github.com/simple-robot-library/simbot3-website/blob/main/docs/docs/take-a-look/code-overview.md",tags:[],version:"current",lastUpdatedBy:"ForteScarlet",lastUpdatedAt:1668945642,formattedLastUpdatedAt:"Nov 20, 2022",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"core\u6982\u89c8"},sidebar:"docs",previous:{title:"\u76d1\u542c\u6982\u89c8",permalink:"/docs/take-a-look/listen-overview"},next:{title:"boot\u6982\u89c8",permalink:"/docs/take-a-look/boot-overview"}},c={},g=[],m={toc:g};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u6838\u5fc3\u6a21\u5757\u4e0b\u6240\u652f\u6301\u7684\u66f4\u8d34\u8fd1\u539f\u751f\u7684\u4f7f\u7528\u65b9\u5f0f\u3002"),(0,r.kt)("admonition",{title:"\u6ce8\u610f",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u4e0b\u6587\u4e2d\u6709\u5173\u4e8e\u76d1\u542c\u51fd\u6570\u6ce8\u518c\u7684\u5185\u5bb9\u5e76\u975e\u76ee\u524d\u7684\u6700\u63a8\u8350\u65b9\u5f0f\u3002")),(0,r.kt)(o.Z,{groupId:"code",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// listener manager\nval listenerManager = coreListenerManager { /* config... */  }\n\n// bot manager\nval botManager = xxxBotManager(listenerManager) { /* config... */ }\n\n// register bot\nval bot = botManager.register(id, key, token, orAnyOther) { /* config... */ }\n\n// listen event.\nlistenerManager.listen(ChannelMessageEvent) { context, event ->\n    println(context)\n    \n    event.replyIfSupport(Text { "Hello World" } + At(event.author.id))\n    \n    val guild = event.channel().guild()\n    \n    guild.children().forEach { ch -> println("Channel ${ch.name} in guild ${guild.name}") } \n    \n    // result value.\n    null\n}\n\nbot.start()\nbot.join()\n\n'))),(0,r.kt)(i.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// listener manager\nfinal CoreListenerManagerConfiguration listenerManagerConfiguration = new CoreListenerManagerConfiguration();\nfinal CoreListenerManager listenerManager = CoreListenerManager.newInstance(listenerManagerConfiguration);\n\nfinal BotManager<?> botManager = xxxBotManager(listenerManager, (config) -> { /* ... */ });\n\nfinal Bot register = botManager.register(id, key, token, orAnyOther, (config) -> { /* ... */ });\n\n\nfinal EventListener listener = CoreListenerUtil.newCoreListener(\n        ChannelMessageEvent.Key,\n        (context, event) -> {\n            System.out.println(context);\n\n            if (event instanceof MessageReplySupport) {\n                final Messages messages = Messages.getMessages(\n                        Text.getText("Hello World"),\n                        new At(event.getAuthor().getId())\n                );\n\n                ((MessageReplySupport) event).replyBlocking(messages);\n            }\n\n            final Guild guild = event.getChannel().getGuild();\n\n            guild.getChildren(null, Limiter.ZERO)\n                    .forEach(ch -> System.out.println("Channel " + ch.getName() + "in guild " + guild.getName()));\n\n\n            return null;\n        }\n);\n\n// register listener\nlistenerManager.register(listener);\n\n\nregister.startBlocking();\nregister.joinBlocking();\n')))))}u.isMDXComponent=!0},8209:(e,t,n)=>{n.d(t,{G:()=>i});var a=n(7294),r=n(7273);const o="light";const i=({chart:e,config:t})=>{if("undefined"==typeof window)return a.createElement("div",{className:"mermaid","data-mermaid-src":e},e);const n=(0,a.useMemo)((()=>"string"==typeof t?JSON.parse(t):t),[t]),i=document.querySelector("html"),[s,l]=(0,a.useState)(!1),d=(0,a.useMemo)((()=>function(e,t){let n=e.getAttribute("data-theme")??o;n!==o&&"dark"!==n&&(n=o);const a=n===o?"default":"dark";return t?.theme?.[n]??t?.mermaid?.theme??a}(i,n)),[n,s]);return(0,a.useEffect)((()=>{const e=new MutationObserver((e=>{for(const t of e)if("attributes"===t.type&&"data-theme"===t.attributeName){l((e=>!e));break}}));return e.observe(i,{attributes:!0}),()=>{try{e.disconnect()}catch{}}}),[]),(0,a.useEffect)((()=>{n&&(n.mermaid?r.Z.initialize({startOnLoad:!0,...n.mermaid,theme:d}):r.Z.initialize({startOnLoad:!0,theme:d}),document.querySelectorAll('div.mermaid[data-processed="true"]').forEach((e=>{e.removeAttribute("data-processed"),e.innerHTML=e.getAttribute("data-mermaid-src")})),r.Z.contentLoaded())}),[n,d]),(0,a.useEffect)((()=>{document.querySelectorAll('div.mermaid[data-processed="true"]').forEach((e=>{e.removeAttribute("data-processed"),e.innerHTML=e.getAttribute("data-mermaid-src")})),setTimeout(r.Z.contentLoaded,0)}),[e]),a.createElement("div",{className:"mermaid","data-mermaid-src":e},e)}}}]);